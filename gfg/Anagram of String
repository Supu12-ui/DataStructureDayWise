Given two strings S1 and S2 in lowercase, the task is to make them anagram. The only allowed operation is to remove a character from any string. Find the minimum number of characters to be deleted to make both the strings anagram. Two strings are called anagram of each other if one of them can be converted into another by rearranging its letters.

Example 1:

Input:
S1 = bcadeh
S2 = hea
Output: 3
Explanation: We need to remove b, c
and d from S1.

Code :
 Used the HASHMAP STORE ALL THE VALUE OF STRING 1 THAN KEEP CHECKING WHETER THE STRING 2 is equal to string 1 if it is equal than  than subtract the value by -1 if not present 
 than put the value and store the -1
 and after completing for loop than count the hashmap value 
 
 class GfG
{
	public int remAnagrams(String s,String s1)
        {
           HashMap<Character,Integer> hm=new HashMap<>();
           for(int i=0;i<s.length();i++)
           {
               hm.put(s.charAt(i),hm.getOrDefault(s.charAt(i),0)+1);
           }
           for(int i=0;i<s1.length();i++)
           {
               if(hm.containsKey(s1.charAt(i)))
               {
                   int value=hm.get(s1.charAt(i));
                   value=value-1;
                   hm.put(s1.charAt(i),value);
               }
               else
               {
                   hm.put(s1.charAt(i),hm.getOrDefault(s1.charAt(i),0)-1);
               }
           }
           int sum=0;
           for(char key:hm.keySet())
           {
               if(hm.get(key)!=0)
               {
                  sum=sum+Math.abs(hm.get(key));
               }
           }
           return sum;
        }
}
